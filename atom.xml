<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-19T08:12:26.555Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/04/19/%E8%AF%BB%E8%AE%BA%E6%96%87%E5%BF%83%E5%BE%97/"/>
    <id>http://example.com/2022/04/19/%E8%AF%BB%E8%AE%BA%E6%96%87%E5%BF%83%E5%BE%97/</id>
    <published>2022-04-19T08:12:26.551Z</published>
    <updated>2022-04-19T08:12:26.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读论文心得"><a href="#读论文心得" class="headerlink" title="读论文心得"></a>读论文心得</h2><h3 id="F2FS"><a href="#F2FS" class="headerlink" title="F2FS"></a>F2FS</h3><p><strong>movitation:</strong></p><ul><li>SSD随机写会导致内部碎片问题，进而降低持续SSD性能（ sustained SSD performance. ）</li><li>随机写在mobile device上很多 </li><li>fsync操作触发很多，主要是由于SQLite被互联网大厂使用，为了保证数据原子性等就有很多fsync</li></ul><p>他的<strong>main-idea</strong>: 使用Log-structure的方法，将随机写转换成顺寻写，解决motivation中的问题</p><p><strong>为什么说他是Flash friendly</strong></p><ul><li>他的数据Unit是FTL操作对齐的，可以减少不必要的数据拷贝</li><li>Wandering Tree问题，递归更新可能发生，这是由于闪存本身不能原地更新导致的，引入NAT解决这个问题</li><li>Multi-head logging 没懂</li><li>Adaptive logging  storatge利用率较高时，logging写入数据时不做前台清理</li><li>fsync优化：最少化需要写入下去的metadata，向前恢复策略保证一致性</li></ul><p><strong>如何解决WanderingTree问题</strong></p><p>​将inode、direct index、indirect index 都一视同仁成node，并且为他们中间在做一次映射（NAT），NAT是扁平结构，而其他的文件系统是缩减版，没有这一层映射。</p><h3 id="A-Compressed-File-System-Manager-for-Flash-Memory-Based-Consumer-Electronics-Devices"><a href="#A-Compressed-File-System-Manager-for-Flash-Memory-Based-Consumer-Electronics-Devices" class="headerlink" title="A Compressed File System Manager for Flash Memory Based Consumer Electronics Devices"></a>A Compressed File System Manager for Flash Memory Based Consumer Electronics Devices</h3><p>主要做了两点</p><ul><li><p>文件系统为了减少用户读的路径上的pagefault设计了预读机制，但对于cramFS上这种压缩类型文件系统会把所有预读的页面进行解压缩，这些解压缩都不一定非常必要。解决方法：<strong>只解压当前请求读的页面，预读页面不解压缩</strong></p></li><li><p>当内存满了的时候，会选择一些victim page驱逐到storage上，对于一个压缩文件系统和不压缩文件系统配合的存储系统，偏向于evict不压缩文件系统的page，因此压缩的page再度有解压的开销。</p></li></ul><h3 id="How-to-Improve-the-Space-Utilization-of-Dedup-based-PCM-Storage-Devices"><a href="#How-to-Improve-the-Space-Utilization-of-Dedup-based-PCM-Storage-Devices" class="headerlink" title="How to Improve the Space Utilization of Dedup-based PCM Storage Devices?"></a>How to Improve the Space Utilization of Dedup-based PCM Storage Devices?</h3><p>主要是做PCM上的deduplication，专注于做变长块去重并存储在PCM设备上的mapping</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><blockquote><p>Introduction:</p><p>However, storage devices are attached<br>to the host system through a storage-device interface, which is usu-<br>ally of fixed management units such as an LBA.</p><p>Thus, to ultimately improve the space utilization of PCM-<br>based storage device, the technical problem falls on (1) how to map<br>fixed-sized LBAs to variable-sized chunks</p></blockquote><p>PCM设备不是字节寻址的吗，为什么要做mapping</p><p>回答：可能是因为fs是block-based，需要做block-based2variable-size的mapping. [还有漏洞，我完全可以利用字节寻址的特性重新设计fs,不需要设计成block-based]</p><p><strong>回答了CDC后variable-size block如何与上层fix-size block-based file system 做mapping的问题</strong></p><blockquote><p>但他是基于PCM字节寻址设备设计，所以不用过多关注读放大现象</p></blockquote><h4 id="使用类似二级页表一样的结构完成LBN-gt-PCA之间的映射"><a href="#使用类似二级页表一样的结构完成LBN-gt-PCA之间的映射" class="headerlink" title="使用类似二级页表一样的结构完成LBN-&gt;PCA之间的映射"></a>使用类似二级页表一样的结构完成LBN-&gt;PCA之间的映射</h4><p><img src="https://s3.bmp.ovh/imgs/2022/04/14/01f51ea8a9453021.png"></p><p> 自问自答：</p><ul><li>为什么primary table不设计成每个Logical block entry 只存一个可变长度的项，或者设计成两个变长的？<ul><li>因为Logical Block本身是定长的，不能设计长一个变长项或者两个变长项目（相当于其中一个一定为定长）</li></ul></li><li>增加、删除、修改的开销都不需要遍历，开销控制还不错</li></ul><h4 id="使用容器处理PCM分配的碎片问题"><a href="#使用容器处理PCM分配的碎片问题" class="headerlink" title="使用容器处理PCM分配的碎片问题"></a>使用容器处理PCM分配的碎片问题</h4><blockquote><p>为什么要做：PCM上存储不定长的数据段，类似于物理内存分配的分配问题，可能会出现碎片，尤其是在回收之后。</p></blockquote><p><img src="https://s3.bmp.ovh/imgs/2022/04/14/f2f3c45dce78e1d5.png"></p><p><strong>文中容器的特点</strong>：</p><ul><li>固定大小</li><li>有容器和不定长块的元数据</li><li>顺序写数据，数据向下生长，元数据向上生长</li><li>可能会有内部碎片，通过搬移数据和合并容器来解决</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/14/9f06ded0fc1e6e75.png"></p><p><strong>当一个不定长块需要写入到PCM后，发生的空间分配流程：</strong></p><ul><li><p>首先检查当前使用的容器顺序写是否能写下</p></li><li><p>写不下根据容器是否有碎片，挂在压缩链表&#x2F;非压缩链表中</p></li><li><p>尝试从压缩&#x2F;非压缩链表中找到一个可用容器（使用worst fit方法，即永远用free space 最多的容器）</p><ul><li>先扫描压缩表，在扫描不压缩表</li></ul></li><li><p>如果没能找到可以存储的新容器，则触发容器合并来尝试进一步处理</p></li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/04/14/698210e0cfcfb24e.png"></p><p><strong>容器如何合并：</strong></p><ul><li>设计一个buddy-system，切分的指标在于容器的size</li><li>每次从树根开始，找最大的节点来合并，只要能够满足当前请求的chunk大小后，就立刻停止合并</li><li>合并过程中会涉及数据的搬移和元数据的重写，会带来开销</li></ul><h3 id="EROFS"><a href="#EROFS" class="headerlink" title="EROFS"></a>EROFS</h3><p><strong>定位</strong>：只读压缩文件系统，在没有修改的场景，数据解压缩的开销比较小</p><p><strong>解决的痛点（背景）</strong>：常规的只读文件系统压缩会有读放大问题，并且解压过程中需要消耗过多的内存和CPU资源，而且这些资源可能是白白浪费到用户没有请求的数据上去了</p><h4 id="定长输出压缩方法"><a href="#定长输出压缩方法" class="headerlink" title="定长输出压缩方法"></a>定长输出压缩方法</h4><p>这里的输入指的是未被压缩的数据块，输出指的是被压缩后的数据块。</p><p>常规的只读压缩fs中一般是做固定的输入切块，通过压缩后得到不定长的输出数据块，在顺序地写到storage中。这里使用到的是通过滑动窗口，生成压缩后大小相同的数据块，而输入数据的分割是不定长度的。</p><p><img src="https://s3.bmp.ovh/imgs/2022/04/14/9a116b02abe8e72d.png"></p><p>当用户请求某一未压缩的数据块（block）时候，可以定位到这个uncompressed block压缩到某一具体的compressed block（或两个compressed block，由于虚拟block被从中间切开了）。相比于原来的方法，请求某一个block时候，需要解压缩他所在chunk所压缩的所有compressed block（图上是1-7）</p><h3 id="关于NAND-FLASH-FTL的简单理解"><a href="#关于NAND-FLASH-FTL的简单理解" class="headerlink" title="关于NAND FLASH FTL的简单理解"></a>关于NAND FLASH FTL的简单理解</h3><blockquote><p>from 老狼-知乎-flash专栏 &amp; &lt;A Reconfigurable FTL (Flash TranslationLayer) Architecture for NAND Flash-Based Applications&gt; &amp; OSTEP</p></blockquote><ul><li><p>一个闪存芯片上有多种管理单位，其中<strong>block</strong>和<strong>page</strong>是关键的单位</p></li><li><p>NAND闪存的特性是，当发生“program”操作的时候，只能把1变成0，即我们可以把11110000改成11000000，但不能改成11111111。即有点像逻辑and操作(我们可以通过NAND这个名字联想记忆一下)。那么如何把0改回1呢？这就要靠擦除操作了，但是擦除操作只能在block的上面操作。</p></li><li><p>FTL的主要作用是完成地址映射、磨损均衡、垃圾回收</p></li><li><p>地址映射的方式主要有三种：page-level   block-level   hybrid-level(log block mapping)</p></li><li><p>NAND FLASH上有一些空闲区域（Over Provisioning），他有几种作用</p><ul><li>坏块处理，发现坏块可以通过映射把空间区域中的好块替换掉坏块</li><li>存储L-P映射表</li><li>给GC和磨损均衡提供腾挪空间</li><li>减少写放大</li></ul></li><li><p>最早的FTL是通过内核驱动的形式实现的，现在变成了固件（MMC）</p></li><li><p>NAND flash中每个block由多个pages组成，此外每个page除了存放数据的main area以外还有一些spare area(OOB)来存放ECC、flag、坏块标记等</p></li></ul><p>​           <img src="https://s3.bmp.ovh/imgs/2022/04/14/4f7d70466b0a5125.png" style="zoom:67%;" /></p><ul><li>从FTL来看，flash可以分为元数据区域和数据区域，上述的OP应该是约等于元数据区域</li></ul><img src="https://inews.gtimg.com/newsapp_ls/0/14747462156/0.jiketuchuang.png" alt="logical view of ftl of nand flash memory.PNG" style="zoom:80%;" /><ul><li><p>hybrid-mapping-1的基本思想</p><blockquote><p>J. Kim, J. M. Kim, S. H. Noh, S. L. Min, and Y. Cho. A space-efficient flash translation layer for compactflash systems. IEEE Transactions on Con-<br>sumer Electronics, 48(2):366–375, 2002</p></blockquote><p>​既然block-mapping方式的overwrite带来太多的写放大，而page-mapping又占用太多的空间，那么就做一个折中。即，一小部分区域做page-mapping，其余地区做block-mapping，做page-mapping的区域被称为log blocks。当overwrite发生时，写把数据记录到log blocks中，并且维护好page映射，log被写满时候则将log中的映射与block-mapping区域中的老旧数据做合并。根据需要overwrite数据的位置和量，可以分成<strong>switch merge</strong>（恰好log中更新的数据处于原来在同一块A上，并且A上所有的数据都需要被更新）、<strong>partial merge</strong>（恰好log中更新的pages处于原来在同一块A上、但A上还有部分pages没有更新）、<strong>full merge</strong>（log中的pages处于不同的块上）。</p><p>​可以分析下使用了hybrid-mapping后，他的写放大现象缓解了多少。即，在full merge情况下，并且需要更新的所有pages全都处于不同的块中，此时退化成block-mapping的写放大情况；其他情况均高于block-mapping。</p></li><li><p>log-structure方式的写配合垃圾回收</p></li></ul><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;读论文心得&quot;&gt;&lt;a href=&quot;#读论文心得&quot; class=&quot;headerlink&quot; title=&quot;读论文心得&quot;&gt;&lt;/a&gt;读论文心得&lt;/h2&gt;&lt;h3 id=&quot;F2FS&quot;&gt;&lt;a href=&quot;#F2FS&quot; class=&quot;headerlink&quot; title=&quot;F2FS&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/04/19/QEMU%20Linux%20%E8%B0%83%E8%AF%95%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/04/19/QEMU%20Linux%20%E8%B0%83%E8%AF%95%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2022-04-19T08:07:23.110Z</published>
    <updated>2022-04-16T02:31:59.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QEMU-Linux-调试开发记录"><a href="#QEMU-Linux-调试开发记录" class="headerlink" title="QEMU Linux 调试开发记录"></a>QEMU Linux 调试开发记录</h2><h3 id="qemu运行ubuntu"><a href="#qemu运行ubuntu" class="headerlink" title="qemu运行ubuntu"></a>qemu运行ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制作一个disk_img文件作为磁盘</span></span><br><span class="line">qemu-img create -f qcow2 <span class="string">&quot;<span class="variable">$disk_img</span>&quot;</span> 1T</span><br><span class="line"><span class="comment"># 镜像放到CRDROM中安装到磁盘（磁盘镜像img）</span></span><br><span class="line">  qemu-system-x86_64 \</span><br><span class="line">    -cdrom <span class="string">&quot;<span class="variable">$iso</span>&quot;</span> \</span><br><span class="line">    -drive <span class="string">&quot;file=<span class="variable">$&#123;disk_img&#125;</span>,format=qcow2&quot;</span> \</span><br><span class="line">    -enable-kvm \</span><br><span class="line">    -m 2G \</span><br><span class="line">    -smp 2 \</span><br><span class="line"><span class="comment"># 在打开qemu中完成系统安装 iso-&gt;img </span></span><br><span class="line"><span class="comment">#对原有img做一个快照，保留原有img不动，每次只修改快照</span></span><br><span class="line">  qemu-img \</span><br><span class="line">    create \</span><br><span class="line">    -b <span class="string">&quot;<span class="variable">$disk_img</span>&quot;</span> \</span><br><span class="line">    -f qcow2 \</span><br><span class="line">    <span class="string">&quot;<span class="variable">$disk_img_snapshot</span>&quot;</span> \</span><br><span class="line"><span class="comment"># 使用快照启动</span></span><br><span class="line"> qemu-system-x86_64 \</span><br><span class="line">  -drive <span class="string">&quot;file=<span class="variable">$&#123;disk_img_snapshot&#125;</span>,format=qcow2&quot;</span> \</span><br><span class="line">  -enable-kvm \</span><br><span class="line">  -m 2G \</span><br><span class="line">  -smp 2 \</span><br><span class="line">  -soundhw hda \</span><br><span class="line">  -vga virtio \</span><br><span class="line">  <span class="string">&quot;<span class="variable">$@</span>&quot;</span> \   </span><br><span class="line">  </span><br><span class="line"> <span class="comment"># 如果想要在host与guest之间共享文件 可以使用9p设备共享</span></span><br><span class="line"> -virtfs <span class="built_in">local</span>,path=/path/to/share,mount_tag=host0,security_model=mapped,<span class="built_in">id</span>=host0 <span class="comment">#启动qemu时候加入该参数</span></span><br><span class="line"> <span class="comment">#并且在guest中mount 9p设备</span></span><br><span class="line"> mount -t 9p -o trans=virtio,version=9p2000.L host0 /mnt/9p</span><br></pre></td></tr></table></figure><h4 id="QEMU启动ARM内核"><a href="#QEMU启动ARM内核" class="headerlink" title="QEMU启动ARM内核"></a>QEMU启动ARM内核</h4><ul><li>只boot内核，并且将输入输出重定向到shell中</li><li>启动内核必须要有一个initrd或者指定一个启动设备并给出启动设备文件</li><li>initrd可以理解成在使用内存模拟一个disk映像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -M vexpress-a9 -kernel zImage -m 512M -dtb vexpress-v2p-ca9.dtb -sd ./rootfs2.ext3   -append <span class="string">&quot;init=/linuxrc root=/dev/mmcblk0 rw rootwait earlyprintk console=ttyAMA0&quot;</span>  -nographic  -fsdev <span class="built_in">local</span>,<span class="built_in">id</span>=kmod_dev,path=./share,security_model=none -device virtio-9p-device,fsdev=kmod_dev,mount_tag=kmod_mount</span><br></pre></td></tr></table></figure><h3 id="QEMU启动Ubuntu镜像-重定向输入输出到命令行"><a href="#QEMU启动Ubuntu镜像-重定向输入输出到命令行" class="headerlink" title="QEMU启动Ubuntu镜像  重定向输入输出到命令行"></a>QEMU启动Ubuntu镜像  重定向输入输出到命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要先在guest中设置grub转发输入输出到串口</span></span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line"><span class="comment">#修改/etc/default/grub</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;console=tty0 console=ttyS0,115200&quot;</span></span><br><span class="line">GRUB_TERMINAL=serial</span><br><span class="line">GRUB_SERIAL_COMMAND=<span class="string">&quot;serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1&quot;</span></span><br><span class="line"><span class="comment">#   修改完别忘了update 其中的错误会检查</span></span><br><span class="line">sudo update-grub </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改qemu启动参数 重要的是&quot;serial mon:stdio&quot;</span></span><br><span class="line">sudo qemu-system-x86_64 -drive <span class="string">&quot;file=./ubuntu-test.snapshot.qcow2,format=qcow2&quot;</span> -enable-kvm -m 2G -smp 2  -serial mon:stdio -nographic </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大致思想是 关闭图形界面 指定命令行输出到串口 串口重定向到shell程序的标准输入输出流</span></span><br></pre></td></tr></table></figure><h3 id="QEMU启动x86-kernel-使用根文件系统"><a href="#QEMU启动x86-kernel-使用根文件系统" class="headerlink" title="QEMU启动x86 kernel 使用根文件系统"></a>QEMU启动x86 kernel 使用根文件系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-x86_64 \</span><br><span class="line">  -kernel linux-v.x.y/arch/x86_64/boot/bzImage \</span><br><span class="line">  -nographic \</span><br><span class="line">  -drive format=raw,file=buildroot/output/images/rootfs.ext4,<span class="keyword">if</span>=virtio \</span><br><span class="line">  -append <span class="string">&quot;root=/dev/vda console=ttyS0 nokaslr &quot;</span> \</span><br><span class="line">  -m 4G \</span><br><span class="line">  -enable-kvm \</span><br><span class="line">  -cpu host \</span><br><span class="line">  -smp $(<span class="built_in">nproc</span>) \</span><br><span class="line"> <span class="comment"># -s -S</span></span><br><span class="line"> <span class="comment"># nokaslr 如果要调试请加入此配置</span></span><br><span class="line"> <span class="comment"># 注意 如果找不到虚拟设备可能是因为内核缺少 CONFIG_VIRTIO_BLK=y   CONFIG_VIRTIO_PCI=y   =m不行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;QEMU-Linux-调试开发记录&quot;&gt;&lt;a href=&quot;#QEMU-Linux-调试开发记录&quot; class=&quot;headerlink&quot; title=&quot;QEMU Linux 调试开发记录&quot;&gt;&lt;/a&gt;QEMU Linux 调试开发记录&lt;/h2&gt;&lt;h3 id=&quot;qemu运</summary>
      
    
    
    
    
  </entry>
  
</feed>
